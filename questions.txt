1. séquence 2-Destructrice pour la figure (b) -> sigma = (v8,v2,v7,v6,v1,v4,v3,v5)

3. La fonction VerifSequenceDestructrice contenu dans la Classe Graphe permet 
de vérifier si une séquence est 2-destructrice.
Déroulement de la fonction :
 - Pour chaque sommet de la séquence, on regarde si dans la séquence le sommet posssède 
    un voisin de couleur rouge,
    - si c'est le cas alors on incrémente le compteur nbVoisinsRougeApres, 
        qui compte le nombre de voisins rouges d'un sommet
        présent après lui dans la séquence
    - si le compteur atteint une valeur supérieur à 2, cela veut dire qu'un sommet
    possède plus de 2 voisins rouge qui lui succèdent dans la séquence, ce qui veut dire
    que la séquence n'est pas 2-destructrice !
Compléxité : O(n²)

    - nous avons utilisé une librairie nommé igraph pour nous aider à mieux visualiser le graphe 
    et vérifier si notre programme de verification de séquence 2-destructrice fonctionnait.


4. Comment construire une séquence 2-destructrice ?
    -> on regarde si le sommet a un nb de voisins rouge inferieur ou egale à 2 selon la listeSommet
        c'est à dire les sommets qui n'ont pas encore été disposé dans la séquence
        si c'est le cas, on met la var booleenne à True car on enleve un sommet de la liste
        et on réitère la boucle jusqu'à ce qu'on n'ajoute plus de sommet à la séquence. 

        On s'occupe ensuite des sommets qui possèdent plus de 2 voisins rouge.
        On va compter le nombre de voisins rouge que possède un sommet dans la liste des sommets n'ayant pas
        été ajouté à la séquence. Si un sommet possède au plus de 2 voisins rouge restant alors on l'ajoute à la séquence et on réitère la boucle
        sinon on termine la boucle



Implémentation : 
Nous avons choisit d'implémenter le Graphe sous la forme d'une Classe Graphe contenant une liste d'adjacence d'Entiers représentants les Sommets du graphes, le nombre de
sommets du Graphe, la liste des couleurs permettant d'attribuer ou non la couleur rouge à chaque sommet i si la valeur est égale à 1 à l'indice i.

La génération d'un graphe aléatoire selon p et r se fait par la fonction "intialiserGrapheAleatoire"
-> Initialisation du graphe selon une loi binomiale pour les couleurs de chaque sommet
    et une loi binomiale pour les arêtes
    La fonction np.random.binomiale nous renvoie un tableau comprenant le resultat d'experience d'une loi binomiale selon
    l'interval des valeurs, ici 0 ou 1, la probabilité d'avoir 1 dans le tableau (self.r ou self.p) et le nombre d'experience
    à effectuer, c'est à dire la taille du tableau de sortie



Résultats de la recherche iterative

n = 50 p = 0.1 r = 65.54   
n = 100 p = 0.1 r = 32.09
n = 50 p = 0.3 r = 23.01
n = 100 p = 0.3 r = 11.72
n = 50 p = 0.5 r = 14.94
n = 100 p = 0.5 r = 7.40
n = 50 p = 0.7 r = 10.80
n = 100 p = 0.7 r = 5.63

n = 50 p = 0.1 r = 64.65
n = 100 p = 0.1 r = 32.97
n = 50 p = 0.3 r = 22.99
n = 100 p = 0.3 r = 11.98
n = 50 p = 0.5 r = 14.99
n = 100 p = 0.5 r = 7.45
n = 50 p = 0.7 r = 11.01
n = 100 p = 0.7 r = 5.41
temps Iteratif : 1000.05290031


Résultats de la recherche dichotomique
n = 50  p = 0.1  r = 65.54    
n = 100 p = 0.1  r = 32.13
n = 50 p = 0.3 r = 23.39
n = 100 p = 0.3 r = 11.62
n = 50 p = 0.5 r = 14.62
n = 100 p = 0.5 r = 7.37
n = 50 p = 0.7 r = 10.52
n = 100 p = 0.7 r = 5.37

n = 50  p = 0.1  r = 65.82  
n = 100 p = 0.1  r = 32.40
n = 50 p = 0.3 r = 23.90
n = 100 p = 0.3 r = 11.58
n = 50 p = 0.5 r = 14.61
n = 100 p = 0.5 r = 7.37
n = 50 p = 0.7 r = 10.69
n = 100 p = 0.7 r = 5.19
temps Dichotomoie : 679.76657605